package main_test

import (
	"os"
	"testing"
	"unsafe"
)

func TestFindPatternBuild4554(t *testing.T) {
	fHwDll, err := os.ReadFile("hw_v43.dll")
	if err != nil {
		t.Errorf("Couldn't Read hw.dll: %v", err.Error())
		return
	}
	bFoundAddress := FindPattern(uintptr(unsafe.Pointer(&fHwDll[0])), len(fHwDll),
		[]byte("\x55\x8B\xEC\x81\xEC\x00\x00\x00\x00\x83\x7D\x08\x00\x75\x07\xC7\x45\x00\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8B\x45\x0C\x50\xE8\x00\x00\x00\x00\x83\xC4\x08\x85\xC0\x0F\x84\x00\x00\x00\x00\xC7\x45\x00\x00\x00\x00\x00\xD9\x45\xFC\x83\xEC\x08\xDD\x1C\x24\x68\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8D\x8D\x00\x00\x00\x00\x51\xE8\x00\x00\x00\x00\x83\xC4\x14\x8D\x95\x00\x00\x00\x00\x52\xE8\x00\x00\x00\x00\x83\xC4\x04\xD9\x45\xFC\x83\xEC\x08\xDD\x1C\x24\x68\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8D\x85\x00\x00\x00\x00\x50\xE8\x00\x00\x00\x00\x83\xC4\x14\x8D\x8D\x00\x00\x00\x00\x51\xE8\x00\x00\x00\x00\x83\xC4\x04\xD9\x45\xFC\x83\xEC\x08\xDD\x1C\x24\x68\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8D\x95\x00\x00\x00\x00\x52\xE8\x00\x00\x00\x00\x83\xC4\x14\x8D\x85\x00\x00\x00\x00\x50\xE8\x00\x00\x00\x00\x83\xC4\x04\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\x8B\x4D\x08\x51\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x83\x3D\x00\x00\x00\x00\x00\x75\x49\xC7\x85\x00\x00\x00\x00\x00\x00\x00\x00\x6A\x00\x6A\x00\x8D\x95\x00\x00\x00\x00\x52\x68\x00\x00\x00\x00\xFF\x15\x00\x00\x00\x00\x50\x6A\x00\x68\x00\x00\x00\x00\xFF\x15\x00\x00\x00\x00\x8B\x85\x00\x00\x00\x00\x50\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x08\x33\xC0\xE9\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8B\x0D\x00\x00\x00\x00\x51\xFF\x15\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x8B\x15\x00\x00\x00\x00\x89\x15\x00\x00\x00\x00\x68\x00\x00\x00\x00\xA1\x00\x00\x00\x00\x50\xFF\x15\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x8B\x0D\x00\x00\x00\x00\x89\x0D\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8B\x15\x00\x00\x00\x00\x52\xFF\x15\x00\x00\x00\x00\xA3\x00\x00\x00\x00\xA1\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x68\x00\x00\x00\x00\x8B\x0D\x00\x00\x00\x00\x51\xFF\x15\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x8B\x15\x00\x00\x00\x00\x89\x15\x00\x00\x00\x00\x68\x00\x00\x00\x00\xA1\x00\x00\x00\x00\x50"),
		"xxxxx????xxxxxxxx?????x????xxxxx????xxxxxxx????xx?????xxxxxxxxxx????x????xx????xx????xxxxx????xx????xxxxxxxxxxxxx????x????xx????xx????xxxxx????xx????xxxxxxxxxxxxx????x????xx????xx????xxxxx????xx????xxxx????x????xxxxxxxx????xxxx????xx?????xxxx????????xxxxxx????xx????xx????xxxx????xx????xx????xx????x????xxxxxx????x????xx????xxx????x????xx????xx????x????x????xxx????x????xx????xx????x????xx????xxx????x????x????x????x????xx????xxx????x????xx????xx????x????x????x")
	if bFoundAddress == 0 {
		t.Error("No signature found")
		return
	}
	iOffset := bFoundAddress - uintptr(unsafe.Pointer(&fHwDll[0]))
	t.Logf("Found signature at 0x%x ==> Offset at 0x%x / File length is 0x%x\n", bFoundAddress, iOffset, len(fHwDll))
	if (*(*uint32)(unsafe.Pointer(bFoundAddress))) != 0x81EC8B55 {
		t.Errorf("Invalid content: 0x%X", (*(*uint32)(unsafe.Pointer(bFoundAddress))))
		return
	}
}

func TestFindPatternBuildSteam(t *testing.T) {
	fHwDll, err := os.ReadFile("hw_steam.dll")
	if err != nil {
		t.Errorf("Couldn't Read hw.dll: %v", err.Error())
		return
	}
	bFoundAddress := FindPattern(uintptr(unsafe.Pointer(&fHwDll[0])), len(fHwDll),
		[]byte("\x55\x8B\xEC\xC7\x05\x00\x00\x00\x00\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\xA1\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x8B\x0D\x00\x00\x00\x00\x89\x0D\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x8B\x15\x00\x00\x00\x00\x89\x15\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\xA1\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x8B\x0D\x00\x00\x00\x00\x89\x0D\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x8B\x15\x00\x00\x00\x00\x89\x15\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\xA1\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x8B\x0D\x00\x00\x00\x00\x89\x0D\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\x8B\x15\x00\x00\x00\x00\x89\x15\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04\xA3\x00\x00\x00\x00\xA1\x00\x00\x00\x00\xA3\x00\x00\x00\x00\x68\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\xC4\x04"),
		"xxxxx????????x????x????xxxx????x????x????x????x????xxxx????xx????xx????x????x????xxxx????xx????xx????x????x????xxxx????x????x????x????x????xxxx????xx????xx????x????x????xxxx????xx????xx????x????x????xxxx????x????x????x????x????xxxx????xx????xx????x????x????xxxx????xx????xx????x????x????xxxx????x????x????x????x????xxx")
	if bFoundAddress == 0 {
		t.Error("No signature found")
		return
	}
	iOffset := bFoundAddress - uintptr(unsafe.Pointer(&fHwDll[0]))
	t.Logf("Found signature at 0x%x ==> Offset at 0x%x / File length is 0x%x\n", bFoundAddress, iOffset, len(fHwDll))
	if (*(*uint32)(unsafe.Pointer(bFoundAddress))) != 0xC7EC8B55 {
		t.Errorf("Invalid content: 0x%X", (*(*uint32)(unsafe.Pointer(bFoundAddress))))
		return
	}
}
